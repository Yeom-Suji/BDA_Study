<aside>
💡 Numpy(Numerical Python)

</aside>

조밀한 데이터 버퍼에서 저장하고 처리하는 효과적인 인터페이스 제공

---

<aside>
💡 파이썬의 데이터 타입 이해하기

</aside>

### 파이썬 정수는 정수 이상이다

파이썬에서 정수를 저장할 때 어느 정도 오버헤드가 있다.

### 파이썬 리스트는 리스트 이상이다

서로 다른 데이터 타입의 요소를 담는 리스트를 만들 수 있다.(→ 파이썬의 동적 타이핑 덕분에)

numpy: 고정 타입의 배열로 유연성은 부족하지만, 데이터를 저장하고 가공하는데 훨씬 효율적.

### 파이썬의 고정 타입 배열

내장 array 모듈: 단일 타입의 조밀한 배열을 만드는 데 사용.

numpy: ndarray 객체→ 효율적인 연산 추가

### 파이썬 리스트에서 배열 만들기

numpy: 고정 타입의 배열 -> 타입이 같지 않으면 상위 타입 취함

데이터 타입 설정: dtype= '데이터타입'

명시적으로 다차원 가능

```python
in:  np.array([range(i, i+3) for i in [2, 4, 6]])
out: array([[2, 3, 4],
            [4, 5, 6],
            [6, 7, 8]])
```

### 처음부터 배열 만들기

규모가 큰 배열의 경우, 효율적

```python
in:  np.linspace(0, 1, 5) #0과 1 사이에 일정한 간격을 가진 다섯 개의 값으로 채운 배열 만들기
out: array([0.  , 0.25, 0.5 , 0.75, 1.  ])
```

```python
in:  np.empty(3) #세 개의 정수를 가지는 초기화되지 않은 배열, 이미 존재하고 있는 값으로 채움
out: array([1., 1., 1.])
```

### Numpy 표준 데이터 타입

```python
np.zeros(10, dtype='int16')
np.zeros(10, dtype=np.int16)
```

<aside>
💡 Numpy 배열의 기초

</aside>

- 배열 속성 지정

- 배열 인덱싱: 단일 요소에 접근하기
    - 음수 인덱스 -> 배열의 끝에서부터 인덱싱 ex) x1[-1]
    - 인덱스 표기법으로 값 수정 가능

- 배열 슬라이싱: 하위 배열에 접근하기
    - x[start:stop:step]
    - 1차원 하위 배열
        - 음수 step: x[stop:start:step(음수)]
    - 다차원 하위 배열
        
        ```python
        in:  x2= np.array([[12, 5, 2, 4],
        		   [7, 6, 8, 8],
        		   [1, 6, 7, 7]])
        in:  x2[:2, :3] #두 개의 행, 세 개의 열
        out: array([[12, 5, 2],
        	   [7, 6, 8]])
        in:  x2[:3, ::2] #모든 행, 한 열 걸러 하나씩
        out: array([[12, 2],
                    [7, 8],
		                 [1, 7]]) 
        in: x2[::-1, ::-1]
        out: array([[7, 7, 6, 1],
        	   [8, 8, 6, 7],
        	   [4, 2, 5, 12]])
        ```
        
        ```python
        in:  print(x2[:, 0]) #x2의 첫 번째 열
        out: [12 7 1]
        in:  print(x2[0, :]) #x2의 첫 번째 행
        out: [12 5 2 4]
        ```
        
    - 사본이 아닌 뷰로서의 하위 배열: 하위 배열을 수정하면 원본도 바뀐다.
    - 배열의 사본 만들기: copy()

- 배열 재구조화
    - .reshape()
    - .newaxis: 행벡터 또는 열벡터

- 배열 결합 및 분할
    - 연결
        - .concatenate()
        - .vstack(): 수직 스택(가로)
        - .hstack(): 수평 스택(세로)
    - 분할
        - .split()
        - .hsplit(): 세로
        - .vsplit(): 가로

<aside>
💡 Numpy 배열 연산: 유니버설 함수

</aside>

### 루프는 느리다

### Ufuncs 소개

- 벡터화 연산: 배열에 연산을 수행해 각 요소에 적용함으로써 수행

### Numpy 유니버설 함수(Ufuncs)

- 단항 Ufuncs
- 이항 Ufuncs

- 배열 산술 연산
- 절댓값 함수
- 삼각함수
- 지수와 로그

```python
in:  x= [0, 0.001, 0.01, 0.1]
		print("exp(x) - 1 = ", np.expm1(x)) #x가 매우 작을 때 np.exp, np.log 보다 더 정확한 값을 내놓음
		print("log(1+x) = ", np.log1p(x))
```

- 특화된 유니버설 함수
    - scipy.special: 통계학에서 등장할 법한 함수들

### 고급 Ufunc 기능

- 출력 지정: out인수
- 집계
- 외적

<aside>
💡 집계: 최솟값, 최댓값, 그리고 그사이의 모든 것

</aside>

### 배열의 값의 합 구하기

- .sum(): 파이썬과 유사하지만 속도가 훨씬 빠름

### 최솟값과 최댓값

- .min(), .max()

```python
print(big_array.min(), big_array.max(), big_array.sum()) #Numpy 버전의 집계함수
```

### 다차원 집계

axis= 인수를 통해 각 행의 집계값을 구할 수 있다.
