<aside>
💡 배열 연산: 브로드캐스팅

</aside>

### 벡터화 연산

- 벡터의 같은 인덱스에 위치한 원소들끼리 연산을 수행하는 기능.
- Numpy에서 지원하는 강력한 연산 기능으로 반복문을 사용하지 않고도 반복해서 연산이 가능.

### 브로드캐스팅 소개

브로드캐스팅을 사용하면 서로 다른 크기의 배열에서 이항 연산 가능.

ex) 배열*스칼라

ex) 1차원 배열 + 다차원 배열: 1차원 배열이 다차원 배열에 맞춰 확장 또는 브로드캐스팅 된다.

ex) 1*3 배열 + 3*1 배열: 두 배열 모두 브로드캐스팅

### 브로드캐스팅 규칙

1. 두 배열의 차원 수가 다르면 더 작은 수의 차원을 가진 배열 형상의 앞쪽(왼쪽)을 1로 채운다
2. 두 배열의 형상이 어떤 차원에서도 일치하지 않는다면 해당 차원의 형상이 1인 배열이 다른 형상과 일치하도록 늘어난다
3. 임의의 차원에서 크기가 일치하지 않고 1도 아니라면 오류가 발생한다.

브로드캐스팅 예제3

### 실전 브로드캐스팅

- 배열을 중앙 정렬하기: 값 - (값들의 평균값)
- 2차원 함수 플로팅하기

<aside>
💡 비교, 마스크, 부울 로직

</aside>

- 마스킹

특정 기준에 따라 배열의 값을 추출하거나 수정, 계산, 조작할 때 사용

이상치 모두 제거할 때

### ufunc으로서의 비교 연산자

### 부울 배열로 작업하기

- 요소 개수 세기
    - np.count_noonzero
    - np.sum(False: 0, True: 1): 행이나 열을 따라 계산 가능
    - np.any: ~인 값이 하나라도 있는가?, 특정 축을 따라 사용 가능
    - np.all: 모든 값이 ~한가?, 특정 축을 따라 사용 가능
    
    주의) sum, any, all은 파이썬 내장함수와는 다른 용도이므로 구분해서 사용
    
- 부울 연산자
    
    
    | & | np.bitwise_and |
    | --- | --- |
    | | | np.bitwise_or |
    | ^ | np.bitwise_xor |
    | ~ | np.bitwise_not |

### 마스크로서의 부울 배열

- 마스킹연산: 조건에 맞는 부울 배열을 인덱스로 사용하는 것

### 키워드 and/or vs. 연산자 &/| 사용하기

and/or: 전체 객체에 대해 단일 부울 평가 수행

&/|: 객체의 내용에 대해 여러 번 부울 평가 수행

<aside>
💡 팬시 인덱싱

</aside>

복잡한 배열 값의 하위 집합에 매우 빠르게 접근 가능

### 팬시 인덱싱 알아보기

### 결합 인덱싱

### 팬시 인덱싱으로 값 변경하기

<aside>
💡 배열 정렬

</aside>

### Numpy의 빠른 정렬: np.sort와 np.argsort

- np.sort: 파이썬의 sorted()와 유사
- np.argsort: 정렬된 요소의 인덱스 반환

### 행이나 열 기준으로 정렬하기

axis 인수 활용

### 부분 정렬: 파티션 나누기

np.partition: 반환된 파티션의 왼쪽에는 K개의 가장 작은 값이 있고 오른쪽에는 나머지 값이 임의의 순서로 채워짐

np.argpartition: 파티션의 인덱스를 계산

K-NN algorithm 예제

<aside>
💡 구조화된 데이터: Numpy의 구조화된 배열

</aside>

복합 데이터 타입을 지정함으로써 구조화된 배열을 만들 수 있다

딕셔너리 방식

### 구조화된 배열 만들기

### 고급 복합 타입

### 레코드 배열: 트위스트를 가진 구조화된 배열

np.recarray
